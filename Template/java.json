{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Codeforces snippet for java": {
		"prefix": [
			"Codeforces",
			"cf",
			"CF",
			"cF",
			"Cf",
		],
		"body": [
			"/** ",
    		"	Developer: Pankaj Kumar",
			"**/",
			"import java.io.* ;",
			"import java.util.*;",
			"import java.io.BufferedReader;",
			"import java.io.IOException;",
			"import java.io.InputStreamReader;",
			"import java.util.ArrayList;",
			"import java.util.Collections;",
			"import java.util.StringTokenizer;",
			"\n",
			"// Experience :",
			"// Cp is nothing but only observation and mathematics.",
			"\n",
			"// Change name of class here first, before compiling",
			"\n",
			"public class Cf1{",
			"	public static void main(String []args){",
			"		FastScanner fs = new FastScanner();",
			"		int testcases = fs.nextInt();",
			"		for(int tt=0;tt<testcases;tt++){\n",
			"			$0\n",
			"		}",
			"	}",

			"	static void sort(int[] a){",
			"		ArrayList<Integer> l=new ArrayList<>();",
			"		for(int i:a){",
			"			l.add(i);",
			"		}",
			"		Collections.sort(l);",
			"		for(int i=0; i<a.length; i++){",
			"			a[i]=l.get(i);",
			"		}",
			"	}",
    		"	static class FastScanner{",

			"		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
			"		StringTokenizer st = new StringTokenizer(\"\");",
			"		String next(){",
			"			while(!st.hasMoreTokens()){",
			"				try{",
			"					st = new StringTokenizer(br.readLine());",
			"				}",
			"				catch(IOException e){",
			"					e.printStackTrace();",
			"				}",
			"			}",
			"			return st.nextToken();",
			"		}",
			"		int nextInt(){",
			"			return Integer.parseInt(next());",
			"		}",
			"		int[] readArray(int n){",
			"			int[] a = new int[n];",
			"			for(int i=0; i<n; i++){",
			"				a[i] = nextInt();",
			"			}",
			"			return a;",
			"		}",
			"		long nextLong(){",
			"			return Long.parseLong(next());",
			"		}",
			"	}",
			"}",
		],
		"description": "java Snippet"
	}
}